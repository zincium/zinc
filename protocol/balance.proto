// zinc balance protocol
// https://grpc.io/docs/languages/go/quickstart/

syntax = "proto3";

option go_package = "github.com/zincium/zinc/protocol";

import "zinc.proto";

package protocol;

// The balance service definition.
service Balance {
  rpc Loadavg(LoadavgRequest) returns (LoadavgResponse) {}
  rpc UploadPack(stream UploadPackRequest) returns (stream UploadPackResponse) {
  }
  rpc ReceivePack(stream ReceivePackRequest)
      returns (stream ReceivePackResponse) {}
  rpc LookupRefs(RefsRequest) returns (stream RefsResponse) {}
  rpc PostUploadPack(stream PostUploadPackRequest)
      returns (stream PostUploadPackResponse) {}
  rpc PostReceivePack(stream PostReceivePackRequest)
      returns (stream PostReceivePackResponse) {}
  rpc Negotiate(NegotiateRequest) returns (NegotiateResponse) {}
}

message LoadavgRequest {}
message LoadavgResponse {
  int64 clone = 1;
  int64 push = 2;
}

enum Step {
  UNINITIALIZE = 0; // uninitialize
  INITIALIZED = 1;
  RECEIVED = 2;
  UPDATED = 3;
  BALANCED = 4;
  POSTED = 5;
};

message NegotiateRequest {
  string representative = 1;
  string event = 2;
  Step step = 3;
}

message NegotiateResponse {
  string representative = 1;
  string event = 2;
  int32 status = 3;
  Step step = 4;
}

message UploadPackRequest {
  enum Filter {
    DEFAULT = 0;
    EXTENDED = 1;
    ALL = 2;
  }
  Repository repo = 1;
  bytes stdin = 2; // input
  string protocol = 3;
  Filter filter = 4;
}

message UploadPackResponse {
  bytes stdout = 1;
  bytes stderr = 2;
  int32 exit_code = 3;
}

// Only the monarch has the ability to update the execution hook
message ReceivePackRequest {
  Repository repo = 1;
  int64 kid = 2;
  int64 uid = 3;
  string protocol = 4;
  bytes stdin = 5;
  string representative = 6;
  // event id.
  string event = 7;
}

message ReceivePackResponse {
  string hash = 1;
  bytes stdout = 2;
  bytes stderr = 3;
  int32 exit_code = 4;
}

// HTTP
message RefsRequest {
  enum Filter {
    DEFAULT = 0;
    EXTENDED = 1;
    ALL = 2;
  }
  enum Mode {
    UPLOADPACK = 0;
    RECEIVEPACK = 1;
  }
  string hash = 1;
  string location = 2;
  string protocol = 3;
  Filter filter = 4;
  Mode mode = 5;
}

message RefsResponse { bytes data = 1; }

message PostUploadPackRequest {
  Repository repo = 1;
  bytes stdin = 2; // input
  string protocol = 3;
}

message PostUploadPackResponse {
  bytes stdout = 1;
  bytes stderr = 2;
  int32 exit_code = 3;
}

message PostReceivePackRequest {
  Repository repo = 1;
  int64 kid = 2;
  int64 uid = 3;
  string protocol = 4;
  bytes stdin = 5;
  string representative = 6;
  string event = 7;
}

message PostReceivePackResponse {
  string hash = 1;
  bytes stdout = 2;
  bytes stderr = 3;
  int32 exit_code = 4;
}