// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: balance.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BalanceClient is the client API for Balance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BalanceClient interface {
	Loadavg(ctx context.Context, in *LoadavgRequest, opts ...grpc.CallOption) (*LoadavgResponse, error)
	UploadPack(ctx context.Context, opts ...grpc.CallOption) (Balance_UploadPackClient, error)
	ReceivePack(ctx context.Context, opts ...grpc.CallOption) (Balance_ReceivePackClient, error)
	LookupRefs(ctx context.Context, in *RefsRequest, opts ...grpc.CallOption) (Balance_LookupRefsClient, error)
	PostUploadPack(ctx context.Context, opts ...grpc.CallOption) (Balance_PostUploadPackClient, error)
	PostReceivePack(ctx context.Context, opts ...grpc.CallOption) (Balance_PostReceivePackClient, error)
	Negotiate(ctx context.Context, in *NegotiateRequest, opts ...grpc.CallOption) (*NegotiateResponse, error)
}

type balanceClient struct {
	cc grpc.ClientConnInterface
}

func NewBalanceClient(cc grpc.ClientConnInterface) BalanceClient {
	return &balanceClient{cc}
}

func (c *balanceClient) Loadavg(ctx context.Context, in *LoadavgRequest, opts ...grpc.CallOption) (*LoadavgResponse, error) {
	out := new(LoadavgResponse)
	err := c.cc.Invoke(ctx, "/protocol.Balance/Loadavg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balanceClient) UploadPack(ctx context.Context, opts ...grpc.CallOption) (Balance_UploadPackClient, error) {
	stream, err := c.cc.NewStream(ctx, &Balance_ServiceDesc.Streams[0], "/protocol.Balance/UploadPack", opts...)
	if err != nil {
		return nil, err
	}
	x := &balanceUploadPackClient{stream}
	return x, nil
}

type Balance_UploadPackClient interface {
	Send(*UploadPackRequest) error
	Recv() (*UploadPackResponse, error)
	grpc.ClientStream
}

type balanceUploadPackClient struct {
	grpc.ClientStream
}

func (x *balanceUploadPackClient) Send(m *UploadPackRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *balanceUploadPackClient) Recv() (*UploadPackResponse, error) {
	m := new(UploadPackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *balanceClient) ReceivePack(ctx context.Context, opts ...grpc.CallOption) (Balance_ReceivePackClient, error) {
	stream, err := c.cc.NewStream(ctx, &Balance_ServiceDesc.Streams[1], "/protocol.Balance/ReceivePack", opts...)
	if err != nil {
		return nil, err
	}
	x := &balanceReceivePackClient{stream}
	return x, nil
}

type Balance_ReceivePackClient interface {
	Send(*ReceivePackRequest) error
	Recv() (*ReceivePackResponse, error)
	grpc.ClientStream
}

type balanceReceivePackClient struct {
	grpc.ClientStream
}

func (x *balanceReceivePackClient) Send(m *ReceivePackRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *balanceReceivePackClient) Recv() (*ReceivePackResponse, error) {
	m := new(ReceivePackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *balanceClient) LookupRefs(ctx context.Context, in *RefsRequest, opts ...grpc.CallOption) (Balance_LookupRefsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Balance_ServiceDesc.Streams[2], "/protocol.Balance/LookupRefs", opts...)
	if err != nil {
		return nil, err
	}
	x := &balanceLookupRefsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Balance_LookupRefsClient interface {
	Recv() (*RefsResponse, error)
	grpc.ClientStream
}

type balanceLookupRefsClient struct {
	grpc.ClientStream
}

func (x *balanceLookupRefsClient) Recv() (*RefsResponse, error) {
	m := new(RefsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *balanceClient) PostUploadPack(ctx context.Context, opts ...grpc.CallOption) (Balance_PostUploadPackClient, error) {
	stream, err := c.cc.NewStream(ctx, &Balance_ServiceDesc.Streams[3], "/protocol.Balance/PostUploadPack", opts...)
	if err != nil {
		return nil, err
	}
	x := &balancePostUploadPackClient{stream}
	return x, nil
}

type Balance_PostUploadPackClient interface {
	Send(*PostUploadPackRequest) error
	Recv() (*PostUploadPackResponse, error)
	grpc.ClientStream
}

type balancePostUploadPackClient struct {
	grpc.ClientStream
}

func (x *balancePostUploadPackClient) Send(m *PostUploadPackRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *balancePostUploadPackClient) Recv() (*PostUploadPackResponse, error) {
	m := new(PostUploadPackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *balanceClient) PostReceivePack(ctx context.Context, opts ...grpc.CallOption) (Balance_PostReceivePackClient, error) {
	stream, err := c.cc.NewStream(ctx, &Balance_ServiceDesc.Streams[4], "/protocol.Balance/PostReceivePack", opts...)
	if err != nil {
		return nil, err
	}
	x := &balancePostReceivePackClient{stream}
	return x, nil
}

type Balance_PostReceivePackClient interface {
	Send(*PostReceivePackRequest) error
	Recv() (*PostReceivePackResponse, error)
	grpc.ClientStream
}

type balancePostReceivePackClient struct {
	grpc.ClientStream
}

func (x *balancePostReceivePackClient) Send(m *PostReceivePackRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *balancePostReceivePackClient) Recv() (*PostReceivePackResponse, error) {
	m := new(PostReceivePackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *balanceClient) Negotiate(ctx context.Context, in *NegotiateRequest, opts ...grpc.CallOption) (*NegotiateResponse, error) {
	out := new(NegotiateResponse)
	err := c.cc.Invoke(ctx, "/protocol.Balance/Negotiate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BalanceServer is the server API for Balance service.
// All implementations should embed UnimplementedBalanceServer
// for forward compatibility
type BalanceServer interface {
	Loadavg(context.Context, *LoadavgRequest) (*LoadavgResponse, error)
	UploadPack(Balance_UploadPackServer) error
	ReceivePack(Balance_ReceivePackServer) error
	LookupRefs(*RefsRequest, Balance_LookupRefsServer) error
	PostUploadPack(Balance_PostUploadPackServer) error
	PostReceivePack(Balance_PostReceivePackServer) error
	Negotiate(context.Context, *NegotiateRequest) (*NegotiateResponse, error)
}

// UnimplementedBalanceServer should be embedded to have forward compatible implementations.
type UnimplementedBalanceServer struct {
}

func (UnimplementedBalanceServer) Loadavg(context.Context, *LoadavgRequest) (*LoadavgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Loadavg not implemented")
}
func (UnimplementedBalanceServer) UploadPack(Balance_UploadPackServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadPack not implemented")
}
func (UnimplementedBalanceServer) ReceivePack(Balance_ReceivePackServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceivePack not implemented")
}
func (UnimplementedBalanceServer) LookupRefs(*RefsRequest, Balance_LookupRefsServer) error {
	return status.Errorf(codes.Unimplemented, "method LookupRefs not implemented")
}
func (UnimplementedBalanceServer) PostUploadPack(Balance_PostUploadPackServer) error {
	return status.Errorf(codes.Unimplemented, "method PostUploadPack not implemented")
}
func (UnimplementedBalanceServer) PostReceivePack(Balance_PostReceivePackServer) error {
	return status.Errorf(codes.Unimplemented, "method PostReceivePack not implemented")
}
func (UnimplementedBalanceServer) Negotiate(context.Context, *NegotiateRequest) (*NegotiateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Negotiate not implemented")
}

// UnsafeBalanceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BalanceServer will
// result in compilation errors.
type UnsafeBalanceServer interface {
	mustEmbedUnimplementedBalanceServer()
}

func RegisterBalanceServer(s grpc.ServiceRegistrar, srv BalanceServer) {
	s.RegisterService(&Balance_ServiceDesc, srv)
}

func _Balance_Loadavg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadavgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceServer).Loadavg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Balance/Loadavg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceServer).Loadavg(ctx, req.(*LoadavgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Balance_UploadPack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BalanceServer).UploadPack(&balanceUploadPackServer{stream})
}

type Balance_UploadPackServer interface {
	Send(*UploadPackResponse) error
	Recv() (*UploadPackRequest, error)
	grpc.ServerStream
}

type balanceUploadPackServer struct {
	grpc.ServerStream
}

func (x *balanceUploadPackServer) Send(m *UploadPackResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *balanceUploadPackServer) Recv() (*UploadPackRequest, error) {
	m := new(UploadPackRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Balance_ReceivePack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BalanceServer).ReceivePack(&balanceReceivePackServer{stream})
}

type Balance_ReceivePackServer interface {
	Send(*ReceivePackResponse) error
	Recv() (*ReceivePackRequest, error)
	grpc.ServerStream
}

type balanceReceivePackServer struct {
	grpc.ServerStream
}

func (x *balanceReceivePackServer) Send(m *ReceivePackResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *balanceReceivePackServer) Recv() (*ReceivePackRequest, error) {
	m := new(ReceivePackRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Balance_LookupRefs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RefsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BalanceServer).LookupRefs(m, &balanceLookupRefsServer{stream})
}

type Balance_LookupRefsServer interface {
	Send(*RefsResponse) error
	grpc.ServerStream
}

type balanceLookupRefsServer struct {
	grpc.ServerStream
}

func (x *balanceLookupRefsServer) Send(m *RefsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Balance_PostUploadPack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BalanceServer).PostUploadPack(&balancePostUploadPackServer{stream})
}

type Balance_PostUploadPackServer interface {
	Send(*PostUploadPackResponse) error
	Recv() (*PostUploadPackRequest, error)
	grpc.ServerStream
}

type balancePostUploadPackServer struct {
	grpc.ServerStream
}

func (x *balancePostUploadPackServer) Send(m *PostUploadPackResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *balancePostUploadPackServer) Recv() (*PostUploadPackRequest, error) {
	m := new(PostUploadPackRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Balance_PostReceivePack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BalanceServer).PostReceivePack(&balancePostReceivePackServer{stream})
}

type Balance_PostReceivePackServer interface {
	Send(*PostReceivePackResponse) error
	Recv() (*PostReceivePackRequest, error)
	grpc.ServerStream
}

type balancePostReceivePackServer struct {
	grpc.ServerStream
}

func (x *balancePostReceivePackServer) Send(m *PostReceivePackResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *balancePostReceivePackServer) Recv() (*PostReceivePackRequest, error) {
	m := new(PostReceivePackRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Balance_Negotiate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NegotiateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceServer).Negotiate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Balance/Negotiate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceServer).Negotiate(ctx, req.(*NegotiateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Balance_ServiceDesc is the grpc.ServiceDesc for Balance service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Balance_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Balance",
	HandlerType: (*BalanceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Loadavg",
			Handler:    _Balance_Loadavg_Handler,
		},
		{
			MethodName: "Negotiate",
			Handler:    _Balance_Negotiate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadPack",
			Handler:       _Balance_UploadPack_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReceivePack",
			Handler:       _Balance_ReceivePack_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "LookupRefs",
			Handler:       _Balance_LookupRefs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PostUploadPack",
			Handler:       _Balance_PostUploadPack_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PostReceivePack",
			Handler:       _Balance_PostReceivePack_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "balance.proto",
}
