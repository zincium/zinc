// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SilverClient is the client API for Silver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SilverClient interface {
	// To forward 'git upload-pack' to silver-backend for SSH sessions
	// First pack stdin is nil
	UploadPack(ctx context.Context, opts ...grpc.CallOption) (Silver_UploadPackClient, error)
	// To forward 'git receive-pack' to silver-backend for SSH sessions
	// First pack stdin is nil
	ReceivePack(ctx context.Context, opts ...grpc.CallOption) (Silver_ReceivePackClient, error)
	// To forward 'git upload-archive' to silver-backend for SSH sessions
	// First pack stdin is nil
	UploadArchive(ctx context.Context, opts ...grpc.CallOption) (Silver_UploadArchiveClient, error)
	// The response body for GET /info/refs?service=git-upload-pack
	// Will be invoked when the user executes a `git fetch`, meaning the server
	// will upload the packs to that user. The user doesn't upload new objects.
	InfoRefsUploadPack(ctx context.Context, in *InfoRefsRequest, opts ...grpc.CallOption) (Silver_InfoRefsUploadPackClient, error)
	// The response body for GET /info/refs?service=git-receive-pack
	// Will be invoked when the user executes a `git push`, but only advertises
	// references to the user.
	InfoRefsReceivePack(ctx context.Context, in *InfoRefsRequest, opts ...grpc.CallOption) (Silver_InfoRefsReceivePackClient, error)
	// Request and response body for POST /upload-pack
	// First pack stdin is nil
	PostUploadPack(ctx context.Context, opts ...grpc.CallOption) (Silver_PostUploadPackClient, error)
	// Request and response body for POST /receive-pack
	// First pack stdin is nil
	PostReceivePack(ctx context.Context, opts ...grpc.CallOption) (Silver_PostReceivePackClient, error)
}

type silverClient struct {
	cc grpc.ClientConnInterface
}

func NewSilverClient(cc grpc.ClientConnInterface) SilverClient {
	return &silverClient{cc}
}

func (c *silverClient) UploadPack(ctx context.Context, opts ...grpc.CallOption) (Silver_UploadPackClient, error) {
	stream, err := c.cc.NewStream(ctx, &Silver_ServiceDesc.Streams[0], "/Silver/UploadPack", opts...)
	if err != nil {
		return nil, err
	}
	x := &silverUploadPackClient{stream}
	return x, nil
}

type Silver_UploadPackClient interface {
	Send(*UploadPackRequest) error
	Recv() (*UploadPackResponse, error)
	grpc.ClientStream
}

type silverUploadPackClient struct {
	grpc.ClientStream
}

func (x *silverUploadPackClient) Send(m *UploadPackRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *silverUploadPackClient) Recv() (*UploadPackResponse, error) {
	m := new(UploadPackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *silverClient) ReceivePack(ctx context.Context, opts ...grpc.CallOption) (Silver_ReceivePackClient, error) {
	stream, err := c.cc.NewStream(ctx, &Silver_ServiceDesc.Streams[1], "/Silver/ReceivePack", opts...)
	if err != nil {
		return nil, err
	}
	x := &silverReceivePackClient{stream}
	return x, nil
}

type Silver_ReceivePackClient interface {
	Send(*ReceivePackRequest) error
	Recv() (*ReceivePackResponse, error)
	grpc.ClientStream
}

type silverReceivePackClient struct {
	grpc.ClientStream
}

func (x *silverReceivePackClient) Send(m *ReceivePackRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *silverReceivePackClient) Recv() (*ReceivePackResponse, error) {
	m := new(ReceivePackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *silverClient) UploadArchive(ctx context.Context, opts ...grpc.CallOption) (Silver_UploadArchiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &Silver_ServiceDesc.Streams[2], "/Silver/UploadArchive", opts...)
	if err != nil {
		return nil, err
	}
	x := &silverUploadArchiveClient{stream}
	return x, nil
}

type Silver_UploadArchiveClient interface {
	Send(*UploadArchiveRequest) error
	Recv() (*UploadArchiveResponse, error)
	grpc.ClientStream
}

type silverUploadArchiveClient struct {
	grpc.ClientStream
}

func (x *silverUploadArchiveClient) Send(m *UploadArchiveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *silverUploadArchiveClient) Recv() (*UploadArchiveResponse, error) {
	m := new(UploadArchiveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *silverClient) InfoRefsUploadPack(ctx context.Context, in *InfoRefsRequest, opts ...grpc.CallOption) (Silver_InfoRefsUploadPackClient, error) {
	stream, err := c.cc.NewStream(ctx, &Silver_ServiceDesc.Streams[3], "/Silver/InfoRefsUploadPack", opts...)
	if err != nil {
		return nil, err
	}
	x := &silverInfoRefsUploadPackClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Silver_InfoRefsUploadPackClient interface {
	Recv() (*InfoRefsResponse, error)
	grpc.ClientStream
}

type silverInfoRefsUploadPackClient struct {
	grpc.ClientStream
}

func (x *silverInfoRefsUploadPackClient) Recv() (*InfoRefsResponse, error) {
	m := new(InfoRefsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *silverClient) InfoRefsReceivePack(ctx context.Context, in *InfoRefsRequest, opts ...grpc.CallOption) (Silver_InfoRefsReceivePackClient, error) {
	stream, err := c.cc.NewStream(ctx, &Silver_ServiceDesc.Streams[4], "/Silver/InfoRefsReceivePack", opts...)
	if err != nil {
		return nil, err
	}
	x := &silverInfoRefsReceivePackClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Silver_InfoRefsReceivePackClient interface {
	Recv() (*InfoRefsResponse, error)
	grpc.ClientStream
}

type silverInfoRefsReceivePackClient struct {
	grpc.ClientStream
}

func (x *silverInfoRefsReceivePackClient) Recv() (*InfoRefsResponse, error) {
	m := new(InfoRefsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *silverClient) PostUploadPack(ctx context.Context, opts ...grpc.CallOption) (Silver_PostUploadPackClient, error) {
	stream, err := c.cc.NewStream(ctx, &Silver_ServiceDesc.Streams[5], "/Silver/PostUploadPack", opts...)
	if err != nil {
		return nil, err
	}
	x := &silverPostUploadPackClient{stream}
	return x, nil
}

type Silver_PostUploadPackClient interface {
	Send(*PostUploadPackRequest) error
	Recv() (*PostUploadPackResponse, error)
	grpc.ClientStream
}

type silverPostUploadPackClient struct {
	grpc.ClientStream
}

func (x *silverPostUploadPackClient) Send(m *PostUploadPackRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *silverPostUploadPackClient) Recv() (*PostUploadPackResponse, error) {
	m := new(PostUploadPackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *silverClient) PostReceivePack(ctx context.Context, opts ...grpc.CallOption) (Silver_PostReceivePackClient, error) {
	stream, err := c.cc.NewStream(ctx, &Silver_ServiceDesc.Streams[6], "/Silver/PostReceivePack", opts...)
	if err != nil {
		return nil, err
	}
	x := &silverPostReceivePackClient{stream}
	return x, nil
}

type Silver_PostReceivePackClient interface {
	Send(*PostReceivePackRequest) error
	Recv() (*PostReceivePackResponse, error)
	grpc.ClientStream
}

type silverPostReceivePackClient struct {
	grpc.ClientStream
}

func (x *silverPostReceivePackClient) Send(m *PostReceivePackRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *silverPostReceivePackClient) Recv() (*PostReceivePackResponse, error) {
	m := new(PostReceivePackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SilverServer is the server API for Silver service.
// All implementations should embed UnimplementedSilverServer
// for forward compatibility
type SilverServer interface {
	// To forward 'git upload-pack' to silver-backend for SSH sessions
	// First pack stdin is nil
	UploadPack(Silver_UploadPackServer) error
	// To forward 'git receive-pack' to silver-backend for SSH sessions
	// First pack stdin is nil
	ReceivePack(Silver_ReceivePackServer) error
	// To forward 'git upload-archive' to silver-backend for SSH sessions
	// First pack stdin is nil
	UploadArchive(Silver_UploadArchiveServer) error
	// The response body for GET /info/refs?service=git-upload-pack
	// Will be invoked when the user executes a `git fetch`, meaning the server
	// will upload the packs to that user. The user doesn't upload new objects.
	InfoRefsUploadPack(*InfoRefsRequest, Silver_InfoRefsUploadPackServer) error
	// The response body for GET /info/refs?service=git-receive-pack
	// Will be invoked when the user executes a `git push`, but only advertises
	// references to the user.
	InfoRefsReceivePack(*InfoRefsRequest, Silver_InfoRefsReceivePackServer) error
	// Request and response body for POST /upload-pack
	// First pack stdin is nil
	PostUploadPack(Silver_PostUploadPackServer) error
	// Request and response body for POST /receive-pack
	// First pack stdin is nil
	PostReceivePack(Silver_PostReceivePackServer) error
}

// UnimplementedSilverServer should be embedded to have forward compatible implementations.
type UnimplementedSilverServer struct {
}

func (UnimplementedSilverServer) UploadPack(Silver_UploadPackServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadPack not implemented")
}
func (UnimplementedSilverServer) ReceivePack(Silver_ReceivePackServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceivePack not implemented")
}
func (UnimplementedSilverServer) UploadArchive(Silver_UploadArchiveServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadArchive not implemented")
}
func (UnimplementedSilverServer) InfoRefsUploadPack(*InfoRefsRequest, Silver_InfoRefsUploadPackServer) error {
	return status.Errorf(codes.Unimplemented, "method InfoRefsUploadPack not implemented")
}
func (UnimplementedSilverServer) InfoRefsReceivePack(*InfoRefsRequest, Silver_InfoRefsReceivePackServer) error {
	return status.Errorf(codes.Unimplemented, "method InfoRefsReceivePack not implemented")
}
func (UnimplementedSilverServer) PostUploadPack(Silver_PostUploadPackServer) error {
	return status.Errorf(codes.Unimplemented, "method PostUploadPack not implemented")
}
func (UnimplementedSilverServer) PostReceivePack(Silver_PostReceivePackServer) error {
	return status.Errorf(codes.Unimplemented, "method PostReceivePack not implemented")
}

// UnsafeSilverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SilverServer will
// result in compilation errors.
type UnsafeSilverServer interface {
	mustEmbedUnimplementedSilverServer()
}

func RegisterSilverServer(s grpc.ServiceRegistrar, srv SilverServer) {
	s.RegisterService(&Silver_ServiceDesc, srv)
}

func _Silver_UploadPack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SilverServer).UploadPack(&silverUploadPackServer{stream})
}

type Silver_UploadPackServer interface {
	Send(*UploadPackResponse) error
	Recv() (*UploadPackRequest, error)
	grpc.ServerStream
}

type silverUploadPackServer struct {
	grpc.ServerStream
}

func (x *silverUploadPackServer) Send(m *UploadPackResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *silverUploadPackServer) Recv() (*UploadPackRequest, error) {
	m := new(UploadPackRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Silver_ReceivePack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SilverServer).ReceivePack(&silverReceivePackServer{stream})
}

type Silver_ReceivePackServer interface {
	Send(*ReceivePackResponse) error
	Recv() (*ReceivePackRequest, error)
	grpc.ServerStream
}

type silverReceivePackServer struct {
	grpc.ServerStream
}

func (x *silverReceivePackServer) Send(m *ReceivePackResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *silverReceivePackServer) Recv() (*ReceivePackRequest, error) {
	m := new(ReceivePackRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Silver_UploadArchive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SilverServer).UploadArchive(&silverUploadArchiveServer{stream})
}

type Silver_UploadArchiveServer interface {
	Send(*UploadArchiveResponse) error
	Recv() (*UploadArchiveRequest, error)
	grpc.ServerStream
}

type silverUploadArchiveServer struct {
	grpc.ServerStream
}

func (x *silverUploadArchiveServer) Send(m *UploadArchiveResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *silverUploadArchiveServer) Recv() (*UploadArchiveRequest, error) {
	m := new(UploadArchiveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Silver_InfoRefsUploadPack_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InfoRefsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SilverServer).InfoRefsUploadPack(m, &silverInfoRefsUploadPackServer{stream})
}

type Silver_InfoRefsUploadPackServer interface {
	Send(*InfoRefsResponse) error
	grpc.ServerStream
}

type silverInfoRefsUploadPackServer struct {
	grpc.ServerStream
}

func (x *silverInfoRefsUploadPackServer) Send(m *InfoRefsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Silver_InfoRefsReceivePack_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InfoRefsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SilverServer).InfoRefsReceivePack(m, &silverInfoRefsReceivePackServer{stream})
}

type Silver_InfoRefsReceivePackServer interface {
	Send(*InfoRefsResponse) error
	grpc.ServerStream
}

type silverInfoRefsReceivePackServer struct {
	grpc.ServerStream
}

func (x *silverInfoRefsReceivePackServer) Send(m *InfoRefsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Silver_PostUploadPack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SilverServer).PostUploadPack(&silverPostUploadPackServer{stream})
}

type Silver_PostUploadPackServer interface {
	Send(*PostUploadPackResponse) error
	Recv() (*PostUploadPackRequest, error)
	grpc.ServerStream
}

type silverPostUploadPackServer struct {
	grpc.ServerStream
}

func (x *silverPostUploadPackServer) Send(m *PostUploadPackResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *silverPostUploadPackServer) Recv() (*PostUploadPackRequest, error) {
	m := new(PostUploadPackRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Silver_PostReceivePack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SilverServer).PostReceivePack(&silverPostReceivePackServer{stream})
}

type Silver_PostReceivePackServer interface {
	Send(*PostReceivePackResponse) error
	Recv() (*PostReceivePackRequest, error)
	grpc.ServerStream
}

type silverPostReceivePackServer struct {
	grpc.ServerStream
}

func (x *silverPostReceivePackServer) Send(m *PostReceivePackResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *silverPostReceivePackServer) Recv() (*PostReceivePackRequest, error) {
	m := new(PostReceivePackRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Silver_ServiceDesc is the grpc.ServiceDesc for Silver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Silver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Silver",
	HandlerType: (*SilverServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadPack",
			Handler:       _Silver_UploadPack_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReceivePack",
			Handler:       _Silver_ReceivePack_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadArchive",
			Handler:       _Silver_UploadArchive_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "InfoRefsUploadPack",
			Handler:       _Silver_InfoRefsUploadPack_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "InfoRefsReceivePack",
			Handler:       _Silver_InfoRefsReceivePack_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PostUploadPack",
			Handler:       _Silver_PostUploadPack_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PostReceivePack",
			Handler:       _Silver_PostReceivePack_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "silver.proto",
}
