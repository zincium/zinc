// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sliced

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SlicerClient is the client API for Slicer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SlicerClient interface {
	UploadPack(ctx context.Context, opts ...grpc.CallOption) (Slicer_UploadPackClient, error)
	ReceivePack(ctx context.Context, opts ...grpc.CallOption) (Slicer_ReceivePackClient, error)
	AdvertiseRefs(ctx context.Context, opts ...grpc.CallOption) (Slicer_AdvertiseRefsClient, error)
	PostUploadPack(ctx context.Context, opts ...grpc.CallOption) (Slicer_PostUploadPackClient, error)
	PostReceivePack(ctx context.Context, opts ...grpc.CallOption) (Slicer_PostReceivePackClient, error)
}

type slicerClient struct {
	cc grpc.ClientConnInterface
}

func NewSlicerClient(cc grpc.ClientConnInterface) SlicerClient {
	return &slicerClient{cc}
}

func (c *slicerClient) UploadPack(ctx context.Context, opts ...grpc.CallOption) (Slicer_UploadPackClient, error) {
	stream, err := c.cc.NewStream(ctx, &Slicer_ServiceDesc.Streams[0], "/Slicer/UploadPack", opts...)
	if err != nil {
		return nil, err
	}
	x := &slicerUploadPackClient{stream}
	return x, nil
}

type Slicer_UploadPackClient interface {
	Send(*UploadPackRequest) error
	Recv() (*UploadPackResponse, error)
	grpc.ClientStream
}

type slicerUploadPackClient struct {
	grpc.ClientStream
}

func (x *slicerUploadPackClient) Send(m *UploadPackRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slicerUploadPackClient) Recv() (*UploadPackResponse, error) {
	m := new(UploadPackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slicerClient) ReceivePack(ctx context.Context, opts ...grpc.CallOption) (Slicer_ReceivePackClient, error) {
	stream, err := c.cc.NewStream(ctx, &Slicer_ServiceDesc.Streams[1], "/Slicer/ReceivePack", opts...)
	if err != nil {
		return nil, err
	}
	x := &slicerReceivePackClient{stream}
	return x, nil
}

type Slicer_ReceivePackClient interface {
	Send(*ReceivePackRequest) error
	Recv() (*ReceivePackResponse, error)
	grpc.ClientStream
}

type slicerReceivePackClient struct {
	grpc.ClientStream
}

func (x *slicerReceivePackClient) Send(m *ReceivePackRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slicerReceivePackClient) Recv() (*ReceivePackResponse, error) {
	m := new(ReceivePackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slicerClient) AdvertiseRefs(ctx context.Context, opts ...grpc.CallOption) (Slicer_AdvertiseRefsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Slicer_ServiceDesc.Streams[2], "/Slicer/AdvertiseRefs", opts...)
	if err != nil {
		return nil, err
	}
	x := &slicerAdvertiseRefsClient{stream}
	return x, nil
}

type Slicer_AdvertiseRefsClient interface {
	Send(*RefsRequest) error
	Recv() (*RefsResponse, error)
	grpc.ClientStream
}

type slicerAdvertiseRefsClient struct {
	grpc.ClientStream
}

func (x *slicerAdvertiseRefsClient) Send(m *RefsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slicerAdvertiseRefsClient) Recv() (*RefsResponse, error) {
	m := new(RefsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slicerClient) PostUploadPack(ctx context.Context, opts ...grpc.CallOption) (Slicer_PostUploadPackClient, error) {
	stream, err := c.cc.NewStream(ctx, &Slicer_ServiceDesc.Streams[3], "/Slicer/PostUploadPack", opts...)
	if err != nil {
		return nil, err
	}
	x := &slicerPostUploadPackClient{stream}
	return x, nil
}

type Slicer_PostUploadPackClient interface {
	Send(*PostUploadPackRequest) error
	Recv() (*PostUploadPackResponse, error)
	grpc.ClientStream
}

type slicerPostUploadPackClient struct {
	grpc.ClientStream
}

func (x *slicerPostUploadPackClient) Send(m *PostUploadPackRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slicerPostUploadPackClient) Recv() (*PostUploadPackResponse, error) {
	m := new(PostUploadPackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slicerClient) PostReceivePack(ctx context.Context, opts ...grpc.CallOption) (Slicer_PostReceivePackClient, error) {
	stream, err := c.cc.NewStream(ctx, &Slicer_ServiceDesc.Streams[4], "/Slicer/PostReceivePack", opts...)
	if err != nil {
		return nil, err
	}
	x := &slicerPostReceivePackClient{stream}
	return x, nil
}

type Slicer_PostReceivePackClient interface {
	Send(*PostReceivePackRequest) error
	Recv() (*PostReceivePackResponse, error)
	grpc.ClientStream
}

type slicerPostReceivePackClient struct {
	grpc.ClientStream
}

func (x *slicerPostReceivePackClient) Send(m *PostReceivePackRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slicerPostReceivePackClient) Recv() (*PostReceivePackResponse, error) {
	m := new(PostReceivePackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SlicerServer is the server API for Slicer service.
// All implementations should embed UnimplementedSlicerServer
// for forward compatibility
type SlicerServer interface {
	UploadPack(Slicer_UploadPackServer) error
	ReceivePack(Slicer_ReceivePackServer) error
	AdvertiseRefs(Slicer_AdvertiseRefsServer) error
	PostUploadPack(Slicer_PostUploadPackServer) error
	PostReceivePack(Slicer_PostReceivePackServer) error
}

// UnimplementedSlicerServer should be embedded to have forward compatible implementations.
type UnimplementedSlicerServer struct {
}

func (UnimplementedSlicerServer) UploadPack(Slicer_UploadPackServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadPack not implemented")
}
func (UnimplementedSlicerServer) ReceivePack(Slicer_ReceivePackServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceivePack not implemented")
}
func (UnimplementedSlicerServer) AdvertiseRefs(Slicer_AdvertiseRefsServer) error {
	return status.Errorf(codes.Unimplemented, "method AdvertiseRefs not implemented")
}
func (UnimplementedSlicerServer) PostUploadPack(Slicer_PostUploadPackServer) error {
	return status.Errorf(codes.Unimplemented, "method PostUploadPack not implemented")
}
func (UnimplementedSlicerServer) PostReceivePack(Slicer_PostReceivePackServer) error {
	return status.Errorf(codes.Unimplemented, "method PostReceivePack not implemented")
}

// UnsafeSlicerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SlicerServer will
// result in compilation errors.
type UnsafeSlicerServer interface {
	mustEmbedUnimplementedSlicerServer()
}

func RegisterSlicerServer(s grpc.ServiceRegistrar, srv SlicerServer) {
	s.RegisterService(&Slicer_ServiceDesc, srv)
}

func _Slicer_UploadPack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlicerServer).UploadPack(&slicerUploadPackServer{stream})
}

type Slicer_UploadPackServer interface {
	Send(*UploadPackResponse) error
	Recv() (*UploadPackRequest, error)
	grpc.ServerStream
}

type slicerUploadPackServer struct {
	grpc.ServerStream
}

func (x *slicerUploadPackServer) Send(m *UploadPackResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slicerUploadPackServer) Recv() (*UploadPackRequest, error) {
	m := new(UploadPackRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Slicer_ReceivePack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlicerServer).ReceivePack(&slicerReceivePackServer{stream})
}

type Slicer_ReceivePackServer interface {
	Send(*ReceivePackResponse) error
	Recv() (*ReceivePackRequest, error)
	grpc.ServerStream
}

type slicerReceivePackServer struct {
	grpc.ServerStream
}

func (x *slicerReceivePackServer) Send(m *ReceivePackResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slicerReceivePackServer) Recv() (*ReceivePackRequest, error) {
	m := new(ReceivePackRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Slicer_AdvertiseRefs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlicerServer).AdvertiseRefs(&slicerAdvertiseRefsServer{stream})
}

type Slicer_AdvertiseRefsServer interface {
	Send(*RefsResponse) error
	Recv() (*RefsRequest, error)
	grpc.ServerStream
}

type slicerAdvertiseRefsServer struct {
	grpc.ServerStream
}

func (x *slicerAdvertiseRefsServer) Send(m *RefsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slicerAdvertiseRefsServer) Recv() (*RefsRequest, error) {
	m := new(RefsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Slicer_PostUploadPack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlicerServer).PostUploadPack(&slicerPostUploadPackServer{stream})
}

type Slicer_PostUploadPackServer interface {
	Send(*PostUploadPackResponse) error
	Recv() (*PostUploadPackRequest, error)
	grpc.ServerStream
}

type slicerPostUploadPackServer struct {
	grpc.ServerStream
}

func (x *slicerPostUploadPackServer) Send(m *PostUploadPackResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slicerPostUploadPackServer) Recv() (*PostUploadPackRequest, error) {
	m := new(PostUploadPackRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Slicer_PostReceivePack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlicerServer).PostReceivePack(&slicerPostReceivePackServer{stream})
}

type Slicer_PostReceivePackServer interface {
	Send(*PostReceivePackResponse) error
	Recv() (*PostReceivePackRequest, error)
	grpc.ServerStream
}

type slicerPostReceivePackServer struct {
	grpc.ServerStream
}

func (x *slicerPostReceivePackServer) Send(m *PostReceivePackResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slicerPostReceivePackServer) Recv() (*PostReceivePackRequest, error) {
	m := new(PostReceivePackRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Slicer_ServiceDesc is the grpc.ServiceDesc for Slicer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Slicer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Slicer",
	HandlerType: (*SlicerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadPack",
			Handler:       _Slicer_UploadPack_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReceivePack",
			Handler:       _Slicer_ReceivePack_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "AdvertiseRefs",
			Handler:       _Slicer_AdvertiseRefs_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PostUploadPack",
			Handler:       _Slicer_PostUploadPack_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PostReceivePack",
			Handler:       _Slicer_PostReceivePack_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sliced.proto",
}
