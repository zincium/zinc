// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sliced

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SlicerClient is the client API for Slicer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SlicerClient interface {
	// To forward 'git upload-pack' to zinc-sliced for SSH sessions
	UploadPack(ctx context.Context, opts ...grpc.CallOption) (Slicer_UploadPackClient, error)
	// To forward 'git receive-pack' to zinc-sliced for SSH sessions
	ReceivePack(ctx context.Context, opts ...grpc.CallOption) (Slicer_ReceivePackClient, error)
	// To forward 'git upload-archive' to zinc-sliced for SSH sessions
	UploadArchive(ctx context.Context, opts ...grpc.CallOption) (Slicer_UploadArchiveClient, error)
	// The response body for GET /info/refs?service=git-upload-pack
	// Will be invoked when the user executes a `git fetch`, meaning the server
	// will upload the packs to that user. The user doesn't upload new objects.
	InfoRefsUploadPack(ctx context.Context, in *InfoRefsRequest, opts ...grpc.CallOption) (Slicer_InfoRefsUploadPackClient, error)
	// The response body for GET /info/refs?service=git-receive-pack
	// Will be invoked when the user executes a `git push`, but only advertises
	// references to the user.
	InfoRefsReceivePack(ctx context.Context, in *InfoRefsRequest, opts ...grpc.CallOption) (Slicer_InfoRefsReceivePackClient, error)
	// Request and response body for POST /upload-pack
	PostUploadPack(ctx context.Context, opts ...grpc.CallOption) (Slicer_PostUploadPackClient, error)
	// Request and response body for POST /receive-pack
	PostReceivePack(ctx context.Context, opts ...grpc.CallOption) (Slicer_PostReceivePackClient, error)
}

type slicerClient struct {
	cc grpc.ClientConnInterface
}

func NewSlicerClient(cc grpc.ClientConnInterface) SlicerClient {
	return &slicerClient{cc}
}

func (c *slicerClient) UploadPack(ctx context.Context, opts ...grpc.CallOption) (Slicer_UploadPackClient, error) {
	stream, err := c.cc.NewStream(ctx, &Slicer_ServiceDesc.Streams[0], "/Slicer/UploadPack", opts...)
	if err != nil {
		return nil, err
	}
	x := &slicerUploadPackClient{stream}
	return x, nil
}

type Slicer_UploadPackClient interface {
	Send(*UploadPackRequest) error
	Recv() (*UploadPackResponse, error)
	grpc.ClientStream
}

type slicerUploadPackClient struct {
	grpc.ClientStream
}

func (x *slicerUploadPackClient) Send(m *UploadPackRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slicerUploadPackClient) Recv() (*UploadPackResponse, error) {
	m := new(UploadPackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slicerClient) ReceivePack(ctx context.Context, opts ...grpc.CallOption) (Slicer_ReceivePackClient, error) {
	stream, err := c.cc.NewStream(ctx, &Slicer_ServiceDesc.Streams[1], "/Slicer/ReceivePack", opts...)
	if err != nil {
		return nil, err
	}
	x := &slicerReceivePackClient{stream}
	return x, nil
}

type Slicer_ReceivePackClient interface {
	Send(*ReceivePackRequest) error
	Recv() (*ReceivePackResponse, error)
	grpc.ClientStream
}

type slicerReceivePackClient struct {
	grpc.ClientStream
}

func (x *slicerReceivePackClient) Send(m *ReceivePackRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slicerReceivePackClient) Recv() (*ReceivePackResponse, error) {
	m := new(ReceivePackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slicerClient) UploadArchive(ctx context.Context, opts ...grpc.CallOption) (Slicer_UploadArchiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &Slicer_ServiceDesc.Streams[2], "/Slicer/UploadArchive", opts...)
	if err != nil {
		return nil, err
	}
	x := &slicerUploadArchiveClient{stream}
	return x, nil
}

type Slicer_UploadArchiveClient interface {
	Send(*UploadArchiveRequest) error
	Recv() (*UploadArchiveResponse, error)
	grpc.ClientStream
}

type slicerUploadArchiveClient struct {
	grpc.ClientStream
}

func (x *slicerUploadArchiveClient) Send(m *UploadArchiveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slicerUploadArchiveClient) Recv() (*UploadArchiveResponse, error) {
	m := new(UploadArchiveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slicerClient) InfoRefsUploadPack(ctx context.Context, in *InfoRefsRequest, opts ...grpc.CallOption) (Slicer_InfoRefsUploadPackClient, error) {
	stream, err := c.cc.NewStream(ctx, &Slicer_ServiceDesc.Streams[3], "/Slicer/InfoRefsUploadPack", opts...)
	if err != nil {
		return nil, err
	}
	x := &slicerInfoRefsUploadPackClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Slicer_InfoRefsUploadPackClient interface {
	Recv() (*InfoRefsResponse, error)
	grpc.ClientStream
}

type slicerInfoRefsUploadPackClient struct {
	grpc.ClientStream
}

func (x *slicerInfoRefsUploadPackClient) Recv() (*InfoRefsResponse, error) {
	m := new(InfoRefsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slicerClient) InfoRefsReceivePack(ctx context.Context, in *InfoRefsRequest, opts ...grpc.CallOption) (Slicer_InfoRefsReceivePackClient, error) {
	stream, err := c.cc.NewStream(ctx, &Slicer_ServiceDesc.Streams[4], "/Slicer/InfoRefsReceivePack", opts...)
	if err != nil {
		return nil, err
	}
	x := &slicerInfoRefsReceivePackClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Slicer_InfoRefsReceivePackClient interface {
	Recv() (*InfoRefsResponse, error)
	grpc.ClientStream
}

type slicerInfoRefsReceivePackClient struct {
	grpc.ClientStream
}

func (x *slicerInfoRefsReceivePackClient) Recv() (*InfoRefsResponse, error) {
	m := new(InfoRefsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slicerClient) PostUploadPack(ctx context.Context, opts ...grpc.CallOption) (Slicer_PostUploadPackClient, error) {
	stream, err := c.cc.NewStream(ctx, &Slicer_ServiceDesc.Streams[5], "/Slicer/PostUploadPack", opts...)
	if err != nil {
		return nil, err
	}
	x := &slicerPostUploadPackClient{stream}
	return x, nil
}

type Slicer_PostUploadPackClient interface {
	Send(*PostUploadPackRequest) error
	Recv() (*PostUploadPackResponse, error)
	grpc.ClientStream
}

type slicerPostUploadPackClient struct {
	grpc.ClientStream
}

func (x *slicerPostUploadPackClient) Send(m *PostUploadPackRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slicerPostUploadPackClient) Recv() (*PostUploadPackResponse, error) {
	m := new(PostUploadPackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slicerClient) PostReceivePack(ctx context.Context, opts ...grpc.CallOption) (Slicer_PostReceivePackClient, error) {
	stream, err := c.cc.NewStream(ctx, &Slicer_ServiceDesc.Streams[6], "/Slicer/PostReceivePack", opts...)
	if err != nil {
		return nil, err
	}
	x := &slicerPostReceivePackClient{stream}
	return x, nil
}

type Slicer_PostReceivePackClient interface {
	Send(*PostReceivePackRequest) error
	Recv() (*PostReceivePackResponse, error)
	grpc.ClientStream
}

type slicerPostReceivePackClient struct {
	grpc.ClientStream
}

func (x *slicerPostReceivePackClient) Send(m *PostReceivePackRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slicerPostReceivePackClient) Recv() (*PostReceivePackResponse, error) {
	m := new(PostReceivePackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SlicerServer is the server API for Slicer service.
// All implementations should embed UnimplementedSlicerServer
// for forward compatibility
type SlicerServer interface {
	// To forward 'git upload-pack' to zinc-sliced for SSH sessions
	UploadPack(Slicer_UploadPackServer) error
	// To forward 'git receive-pack' to zinc-sliced for SSH sessions
	ReceivePack(Slicer_ReceivePackServer) error
	// To forward 'git upload-archive' to zinc-sliced for SSH sessions
	UploadArchive(Slicer_UploadArchiveServer) error
	// The response body for GET /info/refs?service=git-upload-pack
	// Will be invoked when the user executes a `git fetch`, meaning the server
	// will upload the packs to that user. The user doesn't upload new objects.
	InfoRefsUploadPack(*InfoRefsRequest, Slicer_InfoRefsUploadPackServer) error
	// The response body for GET /info/refs?service=git-receive-pack
	// Will be invoked when the user executes a `git push`, but only advertises
	// references to the user.
	InfoRefsReceivePack(*InfoRefsRequest, Slicer_InfoRefsReceivePackServer) error
	// Request and response body for POST /upload-pack
	PostUploadPack(Slicer_PostUploadPackServer) error
	// Request and response body for POST /receive-pack
	PostReceivePack(Slicer_PostReceivePackServer) error
}

// UnimplementedSlicerServer should be embedded to have forward compatible implementations.
type UnimplementedSlicerServer struct {
}

func (UnimplementedSlicerServer) UploadPack(Slicer_UploadPackServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadPack not implemented")
}
func (UnimplementedSlicerServer) ReceivePack(Slicer_ReceivePackServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceivePack not implemented")
}
func (UnimplementedSlicerServer) UploadArchive(Slicer_UploadArchiveServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadArchive not implemented")
}
func (UnimplementedSlicerServer) InfoRefsUploadPack(*InfoRefsRequest, Slicer_InfoRefsUploadPackServer) error {
	return status.Errorf(codes.Unimplemented, "method InfoRefsUploadPack not implemented")
}
func (UnimplementedSlicerServer) InfoRefsReceivePack(*InfoRefsRequest, Slicer_InfoRefsReceivePackServer) error {
	return status.Errorf(codes.Unimplemented, "method InfoRefsReceivePack not implemented")
}
func (UnimplementedSlicerServer) PostUploadPack(Slicer_PostUploadPackServer) error {
	return status.Errorf(codes.Unimplemented, "method PostUploadPack not implemented")
}
func (UnimplementedSlicerServer) PostReceivePack(Slicer_PostReceivePackServer) error {
	return status.Errorf(codes.Unimplemented, "method PostReceivePack not implemented")
}

// UnsafeSlicerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SlicerServer will
// result in compilation errors.
type UnsafeSlicerServer interface {
	mustEmbedUnimplementedSlicerServer()
}

func RegisterSlicerServer(s grpc.ServiceRegistrar, srv SlicerServer) {
	s.RegisterService(&Slicer_ServiceDesc, srv)
}

func _Slicer_UploadPack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlicerServer).UploadPack(&slicerUploadPackServer{stream})
}

type Slicer_UploadPackServer interface {
	Send(*UploadPackResponse) error
	Recv() (*UploadPackRequest, error)
	grpc.ServerStream
}

type slicerUploadPackServer struct {
	grpc.ServerStream
}

func (x *slicerUploadPackServer) Send(m *UploadPackResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slicerUploadPackServer) Recv() (*UploadPackRequest, error) {
	m := new(UploadPackRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Slicer_ReceivePack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlicerServer).ReceivePack(&slicerReceivePackServer{stream})
}

type Slicer_ReceivePackServer interface {
	Send(*ReceivePackResponse) error
	Recv() (*ReceivePackRequest, error)
	grpc.ServerStream
}

type slicerReceivePackServer struct {
	grpc.ServerStream
}

func (x *slicerReceivePackServer) Send(m *ReceivePackResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slicerReceivePackServer) Recv() (*ReceivePackRequest, error) {
	m := new(ReceivePackRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Slicer_UploadArchive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlicerServer).UploadArchive(&slicerUploadArchiveServer{stream})
}

type Slicer_UploadArchiveServer interface {
	Send(*UploadArchiveResponse) error
	Recv() (*UploadArchiveRequest, error)
	grpc.ServerStream
}

type slicerUploadArchiveServer struct {
	grpc.ServerStream
}

func (x *slicerUploadArchiveServer) Send(m *UploadArchiveResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slicerUploadArchiveServer) Recv() (*UploadArchiveRequest, error) {
	m := new(UploadArchiveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Slicer_InfoRefsUploadPack_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InfoRefsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SlicerServer).InfoRefsUploadPack(m, &slicerInfoRefsUploadPackServer{stream})
}

type Slicer_InfoRefsUploadPackServer interface {
	Send(*InfoRefsResponse) error
	grpc.ServerStream
}

type slicerInfoRefsUploadPackServer struct {
	grpc.ServerStream
}

func (x *slicerInfoRefsUploadPackServer) Send(m *InfoRefsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Slicer_InfoRefsReceivePack_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InfoRefsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SlicerServer).InfoRefsReceivePack(m, &slicerInfoRefsReceivePackServer{stream})
}

type Slicer_InfoRefsReceivePackServer interface {
	Send(*InfoRefsResponse) error
	grpc.ServerStream
}

type slicerInfoRefsReceivePackServer struct {
	grpc.ServerStream
}

func (x *slicerInfoRefsReceivePackServer) Send(m *InfoRefsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Slicer_PostUploadPack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlicerServer).PostUploadPack(&slicerPostUploadPackServer{stream})
}

type Slicer_PostUploadPackServer interface {
	Send(*PostUploadPackResponse) error
	Recv() (*PostUploadPackRequest, error)
	grpc.ServerStream
}

type slicerPostUploadPackServer struct {
	grpc.ServerStream
}

func (x *slicerPostUploadPackServer) Send(m *PostUploadPackResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slicerPostUploadPackServer) Recv() (*PostUploadPackRequest, error) {
	m := new(PostUploadPackRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Slicer_PostReceivePack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlicerServer).PostReceivePack(&slicerPostReceivePackServer{stream})
}

type Slicer_PostReceivePackServer interface {
	Send(*PostReceivePackResponse) error
	Recv() (*PostReceivePackRequest, error)
	grpc.ServerStream
}

type slicerPostReceivePackServer struct {
	grpc.ServerStream
}

func (x *slicerPostReceivePackServer) Send(m *PostReceivePackResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slicerPostReceivePackServer) Recv() (*PostReceivePackRequest, error) {
	m := new(PostReceivePackRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Slicer_ServiceDesc is the grpc.ServiceDesc for Slicer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Slicer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Slicer",
	HandlerType: (*SlicerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadPack",
			Handler:       _Slicer_UploadPack_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReceivePack",
			Handler:       _Slicer_ReceivePack_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadArchive",
			Handler:       _Slicer_UploadArchive_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "InfoRefsUploadPack",
			Handler:       _Slicer_InfoRefsUploadPack_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "InfoRefsReceivePack",
			Handler:       _Slicer_InfoRefsReceivePack_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PostUploadPack",
			Handler:       _Slicer_PostUploadPack_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PostReceivePack",
			Handler:       _Slicer_PostReceivePack_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sliced.proto",
}
